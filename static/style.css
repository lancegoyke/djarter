:root {
  /* typography */
  --measure: 60ch;

  /* colors */
  --color-light: hsl(0, 0%, 98%);
  --color-dark: hsl(0, 0%, 10%);
  --color-accent: hsl(125, 51%, 28%);
  --debug-light: hsl(260, 100%, 90%);
  --debug-dark: hsl(260, 100%, 25%);
  --info-light: hsl(200, 100%, 90%);
  --info-dark: hsl(200, 100%, 25%);
  --success-light: hsl(140, 100%, 90%);
  --success-dark: hsl(140, 100%, 25%);
  --warning-light: hsl(20, 100%, 90%);
  --warning-dark: hsl(20, 100%, 25%);
  --error-light: hsl(0, 100%, 87%);
  --error-dark: hsl(0, 98%, 25%);

  /* modular scale */
  --ratio: 1.3;
  --s-5: calc(var(--s-4) / var(--ratio));
  --s-4: calc(var(--s-3) / var(--ratio));
  --s-3: calc(var(--s-2) / var(--ratio));
  --s-2: calc(var(--s-1) / var(--ratio));
  --s-1: calc(var(--s0) / var(--ratio));
  --s0: 1rem;
  --s1: calc(var(--s0) * var(--ratio));
  --s2: calc(var(--s1) * var(--ratio));
  --s3: calc(var(--s2) * var(--ratio));
  --s4: calc(var(--s3) * var(--ratio));
  --s5: calc(var(--s4) * var(--ratio));

  /* space and shape */
  --stack-space: var(--s1);
  --stack-page-space: var(--s5);
  --border-thin: 1px;
  --border-radius: 4px;
  --hover-opacity: 0.8;
  --default-transition: ease-in 120ms;
}

* {
  max-width: var(--measure);
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: "Verdana", sans-serif;
  line-height: 1.5;
  font-size: 16px;
}

a,
button,
html,
body,
div,
header,
nav,
main,
footer {
  max-width: none;
}

footer,
header,
main,
nav {
  display: block;
}

main > * {
  display: block;
  margin-inline-start: auto;
  margin-inline-end: auto;
  max-width: 35rem;
}

main > * + * {
  margin-block-start: var(--s0);
}

footer {
  display: flex;
  justify-content: center;
}

footer a {
  font-size: inherit;
}

img {
  max-width: 100%;
}

ol,
ul {
  padding: revert;
}

/*
  TYPOGRAPHY
*/
h1 {
  font-size: var(--s3);
  line-height: normal;
}

h2 {
  font-size: var(--s2);
}

h3 {
  font-size: var(--s1);
}

h4 {
  font-size: var(--s0);
}

h5 {
  font-size: var(--s-1);
}

h6 {
  font-size: var(--s-2);
}

a {
  color: var(--color-accent);
}

a:hover,
a:focus,
a:active {
  opacity: var(--hover-opacity, 0.8);
}

::selection {
  color: var(--color-light);
  background-color: var(--color-dark);
}

::-moz-selection {
  color: var(--color-light);
  background-color: var(--color-dark);
}

/*
  HEADER
*/

.navbar {
  display: flex;
  justify-content: space-between;
}

.navbar a {
  color: inherit;
}

.navbar a:hover,
.navbar a:focus,
.navbar a:active {
  opacity: var(--hover-opacity, 0.8);
  transition: ease 200ms;
}

.site-title {
  font-weight: 700;
}

/*
  FORMS
*/
input,
textarea,
select {
  padding: var(--s-5) var(--s-3);
  border: var(--border-thin) solid;
  border-radius: var(--border-radius);
  color: var(--color-dark);
  background-color: #fff;
}

input *,
textarea * {
  color: inherit;
}

form > fieldset > div,
form > div {
  display: flex;
  flex-direction: column;
  gap: var(--s-3);
}

form > fieldset > div {
  margin-block-start: var(--stack-space);
}

form > fieldset > div:first-of-type {
  margin-block-start: 0;
}

input:disabled,
textarea:disabled {
  background: #ddd;
  font-style: italic;
}

input.invert,
textarea.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
}

input[type="checkbox"] {
  -webkit-appearance: none;
  appearance: none;
  background-color: #fff;
  margin: 0;
  font: inherit;
  color: var(--color-dark);
  width: 1.15em;
  height: 1.15em;
  /* transform: translateY(-0.175em); */
  display: grid;
  place-content: center;
}

input[type="checkbox"]::before {
  content: "";
  width: 1em;
  height: 1em;
  transform: scale(0);
  transition: 120ms transform ease-in-out;
  box-shadow: inset 1em 1em var(--color-dark);
  background-color: var(--color-dark);
  transform-origin: bottom left;
  clip-path: polygon(6% 61%, 19% 45%, 40% 64%, 78% 8%, 94% 20%, 43% 94%);
}

input[type="checkbox"]:checked::before {
  transform: scale(1);
}

input[type="checkbox"]:focus {
  outline: max(2px, var(--s-5)) solid currentColor;
  outline-offset: max(2px, var(--s-5));
}

input[type="checkbox"]:disabled {
  color: #959495;
  cursor: not-allowed;
}

label {
  font-weight: 700;
}

fieldset {
  padding: var(--s1);
  border: var(--border-thin) solid;
  outline: var(--border-thin) solid transparent;
  outline-offset: calc(var(--border-thin) * -1);
}

legend {
  padding: 0 var(--s-3);
}

.helptext {
  font-size: var(--s-1);
}

/*
  BUTTONS
*/
button,
.button {
  display: inline-block;
  text-decoration: none;
  cursor: pointer;
  padding: var(--s-1) var(--s1);
  max-width: fit-content;
  border: 0 solid;
  border-radius: var(--border-radius);
  outline: var(--border-thin) solid transparent;
  /* for showing shape in high contrast mode */
  outline-offset: calc(var(--border-thin) * -1);
  color: var(--color-light);
  background-color: var(--color-accent);
}

.box button,
.box .button {
  color: var(--color-light);
}

.button.bare {
  background-color: unset;
  color: unset;
  text-decoration: underline;
}

button:hover,
.button:hover {
  opacity: var(--hover-opacity);
  transition: var(--default-transition);
}

button:focus-visible,
.button:focus-visible {
  /* for visible keyboard navigation */
  outline: var(--border-thin) solid var(--color-dark);
  outline-offset: var(--border-thin);
}

/*
  TABLES
*/

th {
  text-align: left;
  padding: var(--s0) var(--s3);
  background-color: #000;
  color: #fff;
}

td {
  padding: var(--s0) var(--s3);
}

/*
  THE STACK

  Description: use with modular scale system for consistent appearance

  Usage: place children inside div.stack

  Ex:
    <div class="stack">
      <div><!-- child --></div>
      <div><!-- child --></div>
      <div><!-- child --></div>
    </div>
*/
.stack {
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
}

.stack > * {
  margin-top: 0;
  margin-bottom: 0;
}

.stack > * + * {
  margin-top: var(--stack-space);
}

/*
  THE CENTER
*/
.center {
  box-sizing: content-box;
  margin-left: auto;
  margin-right: auto;
  max-width: var(--measure);
}

/*
  THE BOX

  Description: the best box is one that fits the content and no more. Padding should
  be applied evenly to all sides. Use utility class margin to get specific
  placement.

  Usage: place contents inside div.box

  Ex:
    <div class="box">
      <!-- the box's content -->
    </div>
*/
.box {
  padding: var(--s1);
  border: var(--border-thin) solid;
  color: var(--color-dark);
  background-color: var(--color-light);
  /* for high contrast mode */
  outline: var(--border-thin) solid transparent;
  outline-offset: calc(var(--border-thin) * -1);
}

.box * {
  color: inherit;
}

.box.invert {
  color: var(--color-light);
  background-color: var(--color-dark);
  border-color: var(--color-light);
}

/*
  THE SIDEBAR

  Ex:

  <div class="with-sidebar-left">
    <div><!-- sidebar --></div>
    <div><!-- non-sidebar --></div>
  </div>

  <div class="with-sidebar-right">
    <div><!-- non-sidebar --></div>
    <div><!-- sidebar --></div>
  </div>
*/
.with-sidebar-left {
  display: flex;
  flex-wrap: wrap;
  gap: var(--s1);
}

.with-sidebar-left > :first-child {
  flex-grow: 1;
}

.with-sidebar-left > :last-child {
  flex-basis: 0;
  flex-grow: 999;
  min-inline-size: 50%;
}

.with-sidebar-right {
  display: flex;
  flex-wrap: wrap;
  gap: var(--s1);
}

.with-sidebar-right > :last-child {
  flex-grow: 1;
}

.with-sidebar-right > :first-child {
  flex-basis: 0;
  flex-grow: 999;
  min-inline-size: 50%;
}

/*
  THE CLUSTER

  Description: a group of items that should stay close together

  Usage: use intermediary wrapper between items and the outer div.cluster

  Ex:
    <div class="cluster">
      <div><!-- child --></div>
      <div><!-- child --></div>
      <div><!-- etc --></div>
    </div>
*/
.cluster {
  display: flex;
  flex-wrap: wrap;
  gap: var(--space, 1rem);
  justify-content: flex-start;
  align-items: center;
}

header .cluster {
  list-style-type: none;
  padding-left: unset;
}

.no-border {
  border: none;
}

/*
  Utilities
*/
.font-size\:bigger {
  font-size: var(--s2);
}

.font-size\:big {
  font-size: var(--s1);
}

.font-size\:regular {
  font-size: var(--s0);
}

.font-size\:small {
  font-size: var(--s-1);
}

.font-size\:smaller {
  font-size: var(--s-2);
}
